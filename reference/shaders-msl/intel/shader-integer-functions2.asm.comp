#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>
	
template <typename T, size_t Num>
struct unsafe_array
{
	T __Elements[Num ? Num : 1];
	
	constexpr size_t size() const thread { return Num; }
	constexpr size_t max_size() const thread { return Num; }
	constexpr bool empty() const thread { return Num == 0; }
	
	constexpr size_t size() const device { return Num; }
	constexpr size_t max_size() const device { return Num; }
	constexpr bool empty() const device { return Num == 0; }
	
	constexpr size_t size() const constant { return Num; }
	constexpr size_t max_size() const constant { return Num; }
	constexpr bool empty() const constant { return Num == 0; }
	
	constexpr size_t size() const threadgroup { return Num; }
	constexpr size_t max_size() const threadgroup { return Num; }
	constexpr bool empty() const threadgroup { return Num == 0; }
	
	thread T &operator[](size_t pos) thread
	{
		return __Elements[pos];
	}
	constexpr const thread T &operator[](size_t pos) const thread
	{
		return __Elements[pos];
	}
	
	device T &operator[](size_t pos) device
	{
		return __Elements[pos];
	}
	constexpr const device T &operator[](size_t pos) const device
	{
		return __Elements[pos];
	}
	
	constexpr const constant T &operator[](size_t pos) const constant
	{
		return __Elements[pos];
	}
	
	threadgroup T &operator[](size_t pos) threadgroup
	{
		return __Elements[pos];
	}
	constexpr const threadgroup T &operator[](size_t pos) const threadgroup
	{
		return __Elements[pos];
	}
};

using namespace metal;

struct foo
{
    uint a;
    uint b;
    int c;
    int d;
};

kernel void main0(device foo& _4 [[buffer(0)]])
{
    _4.a = clz(_4.a);
    _4.a = ctz(_4.a);
    _4.a = absdiff(_4.c, _4.d);
    _4.a = absdiff(_4.a, _4.b);
    _4.c = addsat(_4.c, _4.d);
    _4.a = addsat(_4.a, _4.b);
    _4.c = hadd(_4.c, _4.d);
    _4.a = hadd(_4.a, _4.b);
    _4.c = rhadd(_4.c, _4.d);
    _4.a = rhadd(_4.a, _4.b);
    _4.c = subsat(_4.c, _4.d);
    _4.a = subsat(_4.a, _4.b);
    _4.c = int(short(_4.c)) * int(short(_4.d));
    _4.a = uint(ushort(_4.a)) * uint(ushort(_4.b));
}

