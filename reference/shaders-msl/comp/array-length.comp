#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SSBO
{
    uint size;
    spvUnsafeArray<float4, 1> v;
};

struct SSBO1
{
    spvUnsafeArray<float, 1> bz;
};

static inline __attribute__((always_inline))
uint get_size(device SSBO& v_14, constant uint& v_14BufferSize, thread spvUnsafeArray<device SSBO1*, 2> (&ssbos), constant uint* ssbosBufferSize)
{
    return uint(int((v_14BufferSize - 16) / 16) + int((ssbosBufferSize[1] - 0) / 4));
}

kernel void main0(constant uint* spvBufferSizeConstants [[buffer(3)]], device SSBO& v_14 [[buffer(0)]], device SSBO1* ssbos_0 [[buffer(1)]], device SSBO1* ssbos_1 [[buffer(2)]])
{
    spvUnsafeArray<device SSBO1*, 2> ssbos =
    {
        ssbos_0,
        ssbos_1,
    };

    constant uint& v_14BufferSize = spvBufferSizeConstants[4];
    constant uint* ssbosBufferSize = &spvBufferSizeConstants[5];
    v_14.size = get_size(v_14, v_14BufferSize, ssbos, ssbosBufferSize);
}

