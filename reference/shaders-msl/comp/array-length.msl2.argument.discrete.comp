#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SSBO
{
    uint size;
    spvUnsafeArray<float4, 1> v;
};

struct SSBO1
{
    spvUnsafeArray<float, 1> bz;
};

struct SSBO2
{
    uint size2;
    spvUnsafeArray<float4, 1> w;
};

struct SSBO3
{
    spvUnsafeArray<float, 1> bz;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(1u);

struct spvDescriptorSetBuffer0
{
    device SSBO* v_16 [[id(0)]];
    constant uint* spvBufferSizeConstants [[id(1)]];
};

struct spvDescriptorSetBuffer1
{
    spvUnsafeArray<device thread SSBO1*, 2> ssbos [[id(0)]];
    constant uint* spvBufferSizeConstants [[id(2)]];
};

static inline __attribute__((always_inline))
uint get_size(device SSBO& v_16, constant uint& v_16BufferSize, constant spvUnsafeArray<device SSBO1*, 2> (&ssbos), constant uint* ssbosBufferSize, device SSBO2& v_38, constant uint& v_38BufferSize, thread spvUnsafeArray<device SSBO3*, 2> (&ssbos2), constant uint* ssbos2BufferSize)
{
    uint len = uint(int((v_16BufferSize - 16) / 16));
    len += uint(int((ssbosBufferSize[1] - 0) / 4));
    len += uint(int((v_38BufferSize - 16) / 16));
    len += uint(int((ssbos2BufferSize[0] - 0) / 4));
    return len;
}

kernel void main0(constant spvDescriptorSetBuffer0& spvDescriptorSet0 [[buffer(0)]], constant spvDescriptorSetBuffer1& spvDescriptorSet1 [[buffer(1)]], constant uint* spvBufferSizeConstants [[buffer(25)]], device SSBO2& v_38 [[buffer(2)]], device SSBO3* ssbos2_0 [[buffer(3)]], device SSBO3* ssbos2_1 [[buffer(4)]])
{
    spvUnsafeArray<device SSBO3*, 2> ssbos2 =
    {
        ssbos2_0,
        ssbos2_1,
    };

    constant uint& spvDescriptorSet0_v_16BufferSize = spvDescriptorSet0.spvBufferSizeConstants[0];
    constant uint* spvDescriptorSet1_ssbosBufferSize = &spvDescriptorSet1.spvBufferSizeConstants[0];
    constant uint& v_38BufferSize = spvBufferSizeConstants[2];
    constant uint* ssbos2BufferSize = &spvBufferSizeConstants[3];
    (*spvDescriptorSet0.v_16).size = get_size((*spvDescriptorSet0.v_16), spvDescriptorSet0_v_16BufferSize, spvDescriptorSet1.ssbos, spvDescriptorSet1_ssbosBufferSize, v_38, v_38BufferSize, ssbos2, ssbos2BufferSize);
}

