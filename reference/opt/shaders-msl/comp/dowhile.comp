#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SSBO
{
    float4x4 mvp;
    spvUnsafeArray<float4, 1> in_data;
};

struct SSBO2
{
    spvUnsafeArray<float4, 1> out_data;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(1u);

kernel void main0(const device SSBO& _28 [[buffer(0)]], device SSBO2& _52 [[buffer(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    float4 _59;
    int _60;
    _60 = 0;
    _59 = _28.in_data[gl_GlobalInvocationID.x];
    float4 _42;
    for (;;)
    {
        _42 = _28.mvp * _59;
        int _44 = _60 + 1;
        if (_44 < 16)
        {
            _60 = _44;
            _59 = _42;
        }
        else
        {
            break;
        }
    }
    _52.out_data[gl_GlobalInvocationID.x] = _42;
}

