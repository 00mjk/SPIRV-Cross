#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SSBO
{
    uint size;
    spvUnsafeArray<float4, 1> v;
};

struct SSBO1
{
    spvUnsafeArray<float, 1> bz;
};

struct SSBO2
{
    uint size2;
    spvUnsafeArray<float4, 1> w;
};

struct SSBO3
{
    spvUnsafeArray<float, 1> bz;
};

struct spvDescriptorSetBuffer0
{
    device SSBO* m_16 [[id(0)]];
    constant uint* spvBufferSizeConstants [[id(1)]];
};

struct spvDescriptorSetBuffer1
{
    spvUnsafeArray<device thread SSBO1*, 2> ssbos [[id(0)]];
    constant uint* spvBufferSizeConstants [[id(2)]];
};

kernel void main0(constant spvDescriptorSetBuffer0& spvDescriptorSet0 [[buffer(0)]], constant spvDescriptorSetBuffer1& spvDescriptorSet1 [[buffer(1)]], constant uint* spvBufferSizeConstants [[buffer(5)]], device SSBO2& _38 [[buffer(2)]], device SSBO3* ssbos2_0 [[buffer(3)]], device SSBO3* ssbos2_1 [[buffer(4)]])
{
    spvUnsafeArray<device SSBO3*, 2> ssbos2 =
    {
        ssbos2_0,
        ssbos2_1,
    };

    constant uint& spvDescriptorSet0_m_16BufferSize = spvDescriptorSet0.spvBufferSizeConstants[0];
    constant uint* spvDescriptorSet1_ssbosBufferSize = &spvDescriptorSet1.spvBufferSizeConstants[0];
    constant uint& _38BufferSize = spvBufferSizeConstants[6];
    constant uint* ssbos2BufferSize = &spvBufferSizeConstants[7];
    (*spvDescriptorSet0.m_16).size = ((uint(int((spvDescriptorSet0_m_16BufferSize - 16) / 16)) + uint(int((spvDescriptorSet1_ssbosBufferSize[1] - 0) / 4))) + uint(int((_38BufferSize - 16) / 16))) + uint(int((ssbos2BufferSize[0] - 0) / 4));
}

