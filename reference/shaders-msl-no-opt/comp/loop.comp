#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"
#pragma clang diagnostic ignored "-Wunused-variable"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SSBO
{
    float4x4 mvp;
    spvUnsafeArray<float4, 1> in_data;
};

struct SSBO2
{
    spvUnsafeArray<float4, 1> out_data;
};

kernel void main0(const device SSBO& _24 [[buffer(0)]], device SSBO2& _177 [[buffer(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    uint ident = gl_GlobalInvocationID.x;
    float4 idat = _24.in_data[ident];
    int k = 0;
    uint i = 0u;
    if (idat.y == 20.0)
    {
        do
        {
            k *= 2;
            i++;
        } while (i < ident);
    }
    switch (k)
    {
        case 10:
        {
            for (;;)
            {
                i++;
                if (i > 10u)
                {
                    break;
                }
                continue;
            }
            break;
        }
        default:
        {
            for (;;)
            {
                i += 2u;
                if (i > 20u)
                {
                    break;
                }
                continue;
            }
            break;
        }
    }
    while (k < 10)
    {
        idat *= 2.0;
        k++;
    }
    for (uint i_1 = 0u; i_1 < 16u; i_1++, k++)
    {
        for (uint j = 0u; j < 30u; j++)
        {
            idat = _24.mvp * idat;
        }
    }
    k = 0;
    for (;;)
    {
        k++;
        if (k > 10)
        {
            k += 2;
        }
        else
        {
            k += 3;
            continue;
        }
        k += 10;
        continue;
    }
    k = 0;
    do
    {
        k++;
    } while (k > 10);
    int l = 0;
    for (;;)
    {
        if (l == 5)
        {
            int _172 = l;
            l = _172 + 1;
            continue;
        }
        idat += float4(1.0);
        int _172 = l;
        l = _172 + 1;
        continue;
    }
    _177.out_data[ident] = idat;
}

